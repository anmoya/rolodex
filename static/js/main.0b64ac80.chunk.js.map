{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","monster","id","name","email","className","alt","src","CardList","props","console","log","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","state","searchField","fetch","then","response","json","users","setState","this","filteredMonsters","filter","mstr","toLowerCase","includes","e","target","value","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qTAGaA,G,kBAAO,SAAC,GAAsC,IAAD,IAAnCC,QAAYC,EAAuB,EAAvBA,GAAIC,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,MACzC,OACI,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,GAAGC,IAAG,+BAA0BL,EAA1B,4BACf,6BAAKC,IACL,6BAAKC,SCJJI,EAAW,SAACC,GAErB,OADAC,QAAQC,IAAIF,GAER,qBAAKJ,UAAU,YAAf,SAEQI,EAAMG,SAASC,KAAI,SAACZ,GAAD,OAAc,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,UCNvDY,G,MAAY,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,aACvC,OACE,uBACEX,UAAU,SACVY,KAAK,SACLF,YAAaA,EACbG,SAAUF,MC0BDG,E,kDA5Bb,aAAe,IAAD,8BACZ,gBAEKC,MAAQ,CACXR,SAAU,GACVS,YAAa,IALH,E,gEASO,IAAD,OAClBC,MAAM,8CACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAW,EAAKC,SAAS,CAAEf,SAAUc,S,+BAGrC,IAAD,SAC2BE,KAAKR,MAA/BR,EADD,EACCA,SAAUS,EADX,EACWA,YACZQ,EAAmBjB,EAASkB,QAAQ,SAAAC,GAAI,OAAIA,EAAK5B,KAAK6B,cAAcC,SAASZ,EAAYW,kBAC/F,OACE,sBAAK3B,UAAU,MAAf,UACE,iDACA,cAAC,EAAD,CAAWU,YAAY,oBAAoBC,aAAc,SAAAkB,GAAC,OAAI,EAAKP,SAAS,CAAEN,YAAaa,EAAEC,OAAOC,WACpG,cAAC,EAAD,CAAUxB,SAAUiB,W,GAvBVQ,aCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBjB,MAAK,YAAkD,IAA/CkB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.0b64ac80.chunk.js","sourcesContent":["import React from 'react'\nimport './card.styles.css'\n\nexport const Card = ({ monster : { id, name, email} }) => {\n    return (\n        <div className=\"card-container\">\n            <img alt=\"\" src={`https://robohash.org/${id}?set=set1&size=180x180`} />\n            <h1>{name}</h1>\n            <h3>{email}</h3>\n        </div>\n\n    )\n}","import React from 'react'\nimport './card-list.styles.css'\nimport { Card } from '../card/card.component'\n\nexport const CardList = (props) => {\n    console.log(props);\n    return (\n        <div className=\"card-list\">\n            {\n                props.monsters.map((monster) => (<Card key={monster.id} monster={monster} />))\n            }\n        </div>\n    )\n}","import React from \"react\";\nimport \"./search-box.styles.css\";\n\nexport const SearchBox = ({ placeholder, handleChange }) => {\n  return (\n    <input\n      className=\"search\"\n      type=\"search\"\n      placeholder={placeholder}\n      onChange={handleChange}\n    />\n  );\n};\n","import React, { Component } from \"react\";\nimport \"./App.css\";\n\nimport { CardList } from \"./components/card-list/card-list.component\";\nimport { SearchBox } from \"./components/search-box/search-box.component\";\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      monsters: [],\n      searchField: \"\",\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then((response) => response.json())\n      .then((users) => this.setState({ monsters: users }));\n  }\n\n  render() {\n    const { monsters, searchField } = this.state;\n    const filteredMonsters = monsters.filter( mstr => mstr.name.toLowerCase().includes(searchField.toLowerCase()));\n    return (\n      <div className=\"App\">\n        <h1>Monster Rolodex</h1>\n        <SearchBox placeholder=\"Search monster...\" handleChange={e => this.setState({ searchField: e.target.value })} />\n        <CardList monsters={filteredMonsters} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}